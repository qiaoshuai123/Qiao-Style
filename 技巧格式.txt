        

// 背景颜色渐变
background:linear-gradient(to bottom, rgba(0,9,40,.9), rgba(0,0,0,.8));

// 项目引入图片

import png from '../png'
require('../png')

// 图片不可被选中
draggable="false"

// 点击展开收起

<<< html

<div className={styles.interMonitorBox} style={{ left: `${interMonitorLeft}px` }}>
          <span className={styles.hideIcon} onClick={this.handleShowInterMonitor}>
            {interMonitorLeft > 0 ? <Icon type="backward" /> : <Icon type="forward" />}
          </span>
</div>

<<< css
  .hideIcon {
    position: absolute;
    right: -20px;
    top: 5px;
    width: 20px;
    height: 24px;
    text-align: center;
    line-height: 24px;
    font-size: 24px;
    color: #f1f1fb;
    cursor: pointer;
  }

<<< js
  handleShowInterMonitor = () => {
    if (this.state.interMonitorLeft > 0) {
      this.setState({ interMonitorLeft: -345 })
    } else {
      this.setState({ interMonitorLeft: 15 })
    }
  }


// 关闭弹窗x 旋转

<<<html
  <Icon type="close" className={styles.close} onClick={() => { this.handleClck('Close') }} />

<<< css
  .close {
        float: right;
        height: 35px;
        line-height: 35px;
        cursor: pointer;
        svg:hover {
          transition: all 0.5s;
          transform: rotate(180deg);
          color: #07fff0;
        }
     }
<<< js

// 阻止冒泡捕获

    e.stopPropagation() // 阻止冒泡
    e.preventDefault() // 阻止捕获

// axios all 同个请求同时执行

   Axios.all([getplanList(), getroadListByPlan()])
      .then(Axios.spread((acct, perms) => {
        const { code, data } = acct.data
        if (code === 200) {
          this.plan_id = data[0].plan_id
          this.setState({
            planLister: data,
            planListValue: data[0].plan_name,
            programmeTime: data[0].plan_time_slot,
          })
        }
        const codes = perms.data.code
        const dataLisers = perms.data.data
        if (codes === 200) {
          this.node_id = dataLisers[0].node_id
          this.setState({
            roadListByPlan: dataLisers,
            roadListByPlanValue: dataLisers[0].node_name,
          })
        }

promise all   执行多个异步操作

  function getplanList() {
      return new Promise((resolve) => {
        Axios.get(that.planList).then((res) => {
          resolve(res.data)
        })
      })
    }
    function getroadListByPlan() {
      return new Promise((resolve) => {
        Axios.get(that.roadListByPlan, { params: { areaId: that.areaId } }).then((res) => {
          resolve(res.data)
        })
      })
    }
    Promise.all([getplanList(), getroadListByPlan()])
      .then((result) => {
        const planListData = result[0]
        const roadListByPlanData = result[1]
        const { code, data } = planListData
        if (code === 200) {
          this.plan_id = data[0].plan_id
          this.setState({
            planLister: data,
            planListValue: data[0].plan_name,
            programmeTime: data[0].plan_time_slot,
          })
        }
        const codes = roadListByPlanData.code
        const dataLisers = roadListByPlanData.data
        if (codes === 200) {
          this.node_id = dataLisers[0].node_id
          this.setState({
            roadListByPlan: dataLisers,
            roadListByPlanValue: dataLisers[0].node_name,
          })
        }
        // 区域优化配置-区域路口方案详情
        this.roadListByPlanInfoer()
      })
      .catch(e => console.log(e))
 

